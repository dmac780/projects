/**
 * DMAC's Project data module for the portfolio website.
 * Contains an array of project objects
 * 
 * @author DMAC780
 * @version 1.0.0
 * @since 2025-04-13
 */

export const projects = [
    {
      title: "JS Audio API DAW",
      description: "Browser-based drum sequencer and digital audio workstation designed for high-performance sample-based music production, built entirely using vanilla JavaScript. By leveraging the Web Audio API, the application provides professional-grade sound processing without relying on heavy frameworks. It features a powerful step sequencer with per-group swing, inspired by Roger Linn's classic MPC, allowing for intricate groove patterns without the hassle of MIDI editing. \n\nThe interface is fully responsive, offering a seamless multi-view experience with real-time audio visualization, dark mode, and an efficient sample management system. Users can precisely control tempo, arrange patterns into full songs, and export audio with detailed progress tracking. \n\nBuilt with a component-based architecture, the app stays maintainable and scalable without compromising performance. Its save and load system makes it easy to pick up where you left off, and the transport controls offer flexible playback options. I chose to build everything using ES6 modules, HTML5, and CSS3 to keep full control over the stack. Avoiding frameworks gave me the freedom to optimize and learn from every part of the experience. \n\nThe app also includes a custom VST-style ecosystem that lets users chain multiple effects to individual channels or buses in the mixer. Each plugin runs on its own thread using audio worklets, which delivers the kind of low-latency performance you'd expect from a desktop DAW. The system is modular, high-performance, and fully browser-native. It also gives LLMs a clear, extensible structure to hook into, making it easy to generate or integrate new VST-like effects directly into the codebase without breaking anything.",
      image: "assets/daw1.webp",
      date: "2024",
      tags: ["JS", "CSS", "Web Audio API"]
    },
    {
      title: "SP1200 Emulator",
      description: "Web-based SP-1200 audio emulator that recreates the distinctive sound characteristics of the legendary E-mu SP-1200 drum machine and sampler, which was iconic in hip-hop's golden era.\n\nThe application allows users to upload audio files and process them to simulate the SP-1200's unique 12-bit sampling characteristics. The processing chain involves pitch-shifting the audio up, applying degradation effects (including 12-bit/26kHz sampling, asymmetric quantization noise, and a 4-pole filter chain), and then pitch-shifting back down to create the distinctive digital artifacts that the SP-1200 was known for. Users can control various parameters including playback speed, volume, gain, and filter settings (low-pass, high-pass, and EQ controls for bass, mid, and high frequencies).\n\nThe interface provides a custom waveform display where users can visualize their audio, with features for selecting regions, looping, cropping, and cutting sections of the audio. The app includes standard playback controls and the ability to download the processed audio. It's particularly useful for 'e-diggers' (digital crate diggers) who want to pre-process their samples with that classic SP-1200 sound before using them in their music production software.",
      image: "assets/sp1.webp",
      date: "2024",
      tags: ["JS", "CSS", "Web Audio API"]
    },
    {
        title: "Necromanced Demo",
        description: "Browser-based card collection viewer designed to feel like flipping through real collectible cards. Each card features original artwork from Google Labs Image FX, unique game mechanics, and lore, presented with responsive 3D tilt, subtle paper textures, and six unique holographic finishes that shift and shimmer with mouse movement. The interface creates a sense of depth and realism that pulls you out of the typical web experience and into something that feels physical and interactive.\n\nBuilt entirely with vanilla JavaScript, HTML, and CSS, the project uses no frameworks or build tools. The codebase is split into modular JavaScript files that handle data loading, layout, hover interaction, and rendering logic. Card data is stored in JSON and injected into HTML templates on load.\n\nThe holographic effects were inspired by a Pokémon card demo on CodePen but re-engineered from the ground up in raw CSS. The system uses layered gradients, background blending modes, and transform properties to mimic foil-like reflections without relying on WebGL. Combined with paper grain overlays and fluid mouse tracking, the result is a clean, dependency-free experience that looks and feels high-end.",
        image: "assets/cards1.webp",
        date: "2025",
        tags: ["JS", "HTML", "CSS"]
    },
    {
        title: "Page Builders",
        description: "Page Builders is a fast-paced, hyper-sarcastic spoken-word monologue that drags modern web development through the mud, with love. Delivered in the ironically calm and confident tone of a high-end documentary narrator, it hilariously dismantles the dumpster fire that is contemporary WordPress development, page builder culture, and the corporate “best practices” that lead to bloated sliders, unmaintainable designs, and soul-crushing workflows.\n\nI wrote, produced, and directed the voice concept for the entire piece, intentionally leaning into chaotic energy, familiar agency trauma, and inside-baseball developer lingo. Think John Oliver meets Werner Herzog, but for web devs who’ve rage-quit over a 16MB hero image on shared hosting and a plugin stack that’s one jQuery conflict away from detonating.\n\nThis isn’t just a roast, it’s a cathartic therapy session disguised as satire. The script riffs on everything from haunted CSS menus and Frankensteined themes to the philosophical tragedy of clients never editing the content we built page builders for in the first place. It’s an unfiltered tribute to the developers, designers, and digital masochists who’ve duct-taped their way through “intuitive” visual editors while marketing insists on sliders and autoplay video backgrounds.",
        image: "assets/girl.webp",
        date: "2025",
        tags: ["Content"]
    },
    {
        title: "Vaporwave 3D Portfolio",
        description: "This is a single-page portfolio site built entirely with HTML, CSS, and vanilla JavaScript. It uses THREE.js for 3D visuals, GSAP and ScrollTrigger for animations, Lenis for smooth scrolling, and SVG filters for effects. No frameworks or build tools are involved. \n\nThe landing page delivers an immediate visual punch with a fully animated 3D scene that pulls the user into a stylized, retro-futuristic world from the first frame. A controllable DeLorean moves along an infinite road, responding to mouse movements, creating a dynamic, game-like interaction. Custom shaders drive vivid effects for the sun, stars, and gradient sky, while 3D models like palm trees and the DeLorean bring the scene to life.  \n\nMidway through the scroll experience, projects are presented with smooth transitions and interactive elements that feel tactile and cinematic. Horizontal scrolling layers over vertical movement to create momentum, while hover effects and scroll indicators maintain the retro-futuristic theme. \n\nThe bottom of the page features a simulated CRT monitor, fully interactive, complete with scanlines, noise overlays, and physical channel toggle buttons. The screen mimics a vintage terminal, displaying site credits in a stylized, nostalgic interface that feels pulled from a different era but rendered with modern precision.  \n\nThe experience is further enhanced with design assets from Google Labs Image FX and subtle sound effects that support the visual tone. The footer includes an animated parallax water effect using SVG filters, with ripples and turbulence that loop smoothly in real time. The entire layout is fully responsive, with touch controls and optimized animations that scale across devices.  \n\nApp-like transitions, smooth scroll behavior, and precise animation timing bring everything together into a site that merges early web nostalgia with the capabilities of modern web tech.",
        image: "assets/pyramid1.webp",
        date: "2025",
        tags: ["JS", "HTML", "CSS", "THREE.js", "Lenis", "GSAP"]
    },
    {
      title: "Emoji Combo Kitchen",
      description: "Emoji Combo Kitchen is a cooking-themed slot machine game that reimagines traditional mechanics through a recipe-matching system. Instead of paylines, players match emoji ingredients across a 5x5 reel grid to cook dishes, earn points, and unlock new content. Rare and epic ingredients are weighted to appear less often, adding excitement and depth to each spin. Players can discover and collect over 60 unique recipes, tracked in an interactive sticker book that fills out as they progress. All progress is saved through localStorage, so returning players can pick up right where they left off.\n\nThe game includes a built-in shop where players can use in-game currency to unlock power-ups, bonus effects, hidden music tracks, AI-slop backgrounds, and fun SFX. Everything is designed to enhance gameplay without pushing real-world transactions. No paywalls, no burnout. Free spins are granted every 10 minutes, and the in-game economy is tuned to be generous, making it hard for players to hit zero.\n\nBehind the scenes, the game features modular, maintainable code built with vanilla JavaScript, HTML5, and CSS3. Features like persistent state management, animated UI elements, async event handling, and dynamic DOM updates ensure smooth, responsive gameplay. A custom recipe detection engine scans each spin for valid combinations, rewarding creativity and exploration.\n\nEmoji Combo Kitchen combines engaging game mechanics with a playful, rewarding system, designed to delight players while showcasing strong front-end architecture and thoughtful game design.",
      image: "assets/emoji.webp",
      date: "2025",
      tags: ["JS", "HTML", "CSS"]
    },
    {
      title: "Easel's Lament",
      description: "Easel's Lament is a fictional electronic music group created entirely using AI. From the first lyric drafts to the final mastered track, every part of the creative process was powered by generative tools and built during Udio's open beta phase.\n\nWhen I received early access to Udio, the platform was wide open with no content caps and very few limitations. I used that opportunity to explore a range of genres and styles, eventually landing on a retro-futuristic, cyberpunk-inspired synthwave sound that felt both nostalgic and fresh.\n\nThe process came with its share of challenges. At the time, Udio couldn’t generate clips longer than 30 seconds and had difficulty maintaining consistent song structure. I had to carefully stitch together fragments of lyrics I had been experimenting with until the vocals and tone felt right. From there, I continued refining the lyrics, regenerating sections, and shaping the composition until I had something that resembled a complete song.\n\nOnce I had a workable track, I brought it into a digital audio workstation for mastering, boosting the levels and polishing the mix to make it sound as cohesive as possible. It was both a technical and creative puzzle, taking rough pieces and turning them into something meaningful. Since then, the technology has dramatically improved, so I hope to revisit this project in the near future.",
      image: "assets/el2.webp",
      date: "2024",
      tags: ["Content", "Udio"]
    },
    {
        title: "WebP Image Converter",
        description: "The WebP Image Converter is a browser-based tool that converts and optimizes images entirely on the client side, eliminating server uploads or third-party processing. Built with vanilla JavaScript and modern web APIs, it features an intuitive drag-and-drop interface, batch processing, real-time optimization stats, and ZIP downloads. Its responsive design adapts seamlessly across devices, with dark mode and persistent user preferences enhancing usability.\n\nTechnically, the app leverages the File API for uploads and the native toBlob() method for WebP conversion. A central ImageOptimizer class handles the pipeline, ensuring efficient file validation, encoding, and memory management with Blob URLs. Sequential processing prevents browser overload, while a clean, minimalist UI provides clear feedback on file size reduction.",
        image: "assets/webp1.webp",
        date: "2025",
        tags: ["JS", "HTML", "CSS"]
    },
    {
      title: "Asset Killer 2D Engine",
      description: "A modular JavaScript game engine built for offline-first performance and full portability. It avoids ES6 module dependencies and bundles all assets into a self-contained package, enabling seamless operation without a server or internet connection.\n\nThe engine features a dynamic asset loader capable of hot-swapping animations, textures, and audio at runtime with no compiling required. The animation system supports both sprite sheets and frame-by-frame playback with automatic timing, scaling, rotation, and smooth state transitions.\n\nUnder the hood, it combines Matter.js with a custom CollisionManager to handle top-down physics with precision and performance. A manager-based architecture powers systems like input, rendering, sound, and weapons, each isolated for clarity yet optimized through a central GameManager.\n\nInput handling supports keyboard, mouse, and scroll-wheel interactions with configurable keybinds. Scene and state management allow for persistent data, flexible transitions, and both tile-based and custom level layouts.\n\nA toggleable debug system visualizes hitboxes, physics bodies, and runtime data, making it developer-friendly without external tooling.\n\nThis engine balances technical depth with developer efficiency. Ideal for creating polished, responsive 2D games that run anywhere, anytime.",
      image: "assets/ak3.webp",
      date: "2024",
      tags: ["JS", "HTML", "CSS", "Matter.js"]
    },
    {
      title: "EngineMini 2D Engine",
      description: "EngineMini is a 2D game engine built with pure vanilla JavaScript, free from external frameworks like Phaser or Three.js. It focuses on modularity, performance, and flexibility, efficiently managing key gameplay components like tilemaps, physics, camera control, and scene management. The engine is organized with a clean, maintainable codebase using ES6 modules, ensuring scalability and ease of future expansion. \n\nAt its core, the engine integrates seamlessly with the Tiled Map Editor, offering advanced support for custom tilemaps, multi-layered maps, and collision data parsing. This tight integration with Tiled ensures that complex maps with multiple tilesets, dynamic levels, and collision properties can be loaded and handled efficiently. The collision system is custom-built, supporting various shapes like polygons and rectangles, as well as both static and dynamic elements. The engine's performance optimizations, such as viewport culling and debounced input handling, ensure smooth gameplay even with larger, more complex maps.\n\nThe engine also features a robust camera system, with player-following functionality, camera bounds, and smooth transitions between scenes. The scene management system supports independent update and render loops, scene switching, and pause state management. Additionally, the game engine's entity component system (ECS) allows for flexible and extendable entity management, making it easy to add new features and behaviors without disrupting the core systems.\n\nOverall, this project demonstrates a strong understanding of game engine architecture, advanced JavaScript programming, and game development concepts. It showcases my ability to build complex systems from scratch while optimizing for performance and ensuring flexibility for future expansion. The custom-built physics, rendering, and level management systems set this engine apart as a unique and powerful solution for 2D game development.",
      image: "assets/enginemini.webp",
      date: "2024",
      tags: ["JS", "HTML", "CSS", "Matter.js", "Tiled"]
    },
    {
        title: "SpriteGrab",
        description: "SpriteGrab is a custom-built sprite sheet extraction tool that improves on tools like SpriteCow by adding full multi-select, custom engine support, and real-time coordinate export. It runs entirely in the browser with no frameworks or dependencies. I built the functionality from scratch using the Canvas API and a custom flood-fill algorithm to detect sprite boundaries based on transparency. Users can select multiple sprites, toggle selections, and export accurate coordinates in two formats: JSON for my own engine, or CSS-ready code for web animations.\n\nThe UI is lightweight but polished, supporting dark/light themes, drag-and-drop uploads, responsive scaling, and clipboard copy with instant feedback. Every feature is built for performance and usability, even on large sheets.\n\nThis project shows my ability to design complex tools from scratch, handle image processing in the browser, and create dev-friendly interfaces that slot directly into production workflows.",
        image: "assets/spritegrab1.webp",
        date: "2024",
        tags: ["JS", "HTML", "CSS"]
    },
    {
      title: "Project Viewer",
      description: "If you believe in free will, then you chose to come this far, and that means something, doesn't it? And if you don't, then you never had a choice and you were destined to be here. Either way, you're here now. Not many people make it this deep into a portfolio. Fewer stop to read the words. That's kind of sad, but also peaceful. There's something beautiful in knowing that this page could say anything at all and still vanish into the quiet noise of the web, unread, untouched.\n\nStill, here you are.\n\nMaybe you're curious. Maybe you're lost. Maybe the same unseen gravity that pulls us through life pulled you to this exact moment. There's a kind of serenity in that, like drifting through the halls of some forgotten machine, where everything hums just slightly off-key and no one remembers who really built it.\n\nThis place isn't designed to explain itself. It just exists. Like the backrooms of the mind, flickering in and out of clarity. You're not expected to really understand it, only to feel it. The stillness, the tension, the suggestion that something once happened here… or is about to.\n\n And maybe, in a way, we're all like this. Isolated signals in the dark, trying to make contact in a universe too vast for anyone to truly understand. Alone, always alone. As if we've wandered into some forgotten corridor in a world that wasn't meant to be explored. Every interaction here, every motion, is a fleeting ripple across an empty sea. It’s a cosmic loneliness, but one that feels strangely peaceful, like we're not really supposed to be found. \n\nIn this space, you're here, but are you really here? A moment, a whisper, barely lasting. Nothing about this is permanent, and yet it lingers. It's the feeling of a place that exists outside time, where past and future blur into a single, timeless fragment. Maybe you'll leave this page without thinking twice, or maybe it'll stick with you, like a fragment of an old dream you can't quite remember. Both are equally fitting. After all, who can truly understand what exists in the space between moments? \n\nTechnically speaking (if that even matters here), this thing runs on plain JavaScript. No frameworks. Just ES6 modules and a custom event system handling everything: audio, scroll inertia, canvas effects, and UI interactions. Ambient loops, glitch bursts, and reactive one-shots layer into a soundscape tied to presence. \n\nIt was built to feel cold, isolated even. A minimal interface wrapped in a fractured signal. The ambient bed hums in the background while short-circuit sound effects complicate the glitching logo and lean into the atmosphere. Giant footsteps soaked in low-end frequencies echo through the mix, adding cinematic weight and scale, like something massive just shifted in the dark. \n\nThe web should be more than templated brutalism. It used to be a digital canvas, and it still can be. Not polished. Not perfect. Just real. Something that pulls you in and makes you feel something. \n\nTake care of yourself out there.",
      image: "assets/you.webp",
      date: "2025",
      tags: ["JS", "HTML", "CSS", "Web Audio API", "Content"]
    }
  ];